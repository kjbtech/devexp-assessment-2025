name: ci

on:
  push:
  pull_request:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  CONFIGURATION: Release
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true

jobs:
  # Each test job restores too (fast with cache).
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Restore
        working-directory: src
        run: dotnet restore
      - name: Build
        working-directory: src
        run: dotnet build -c $CONFIGURATION --no-restore

  unit_tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Run unit tests
        working-directory: src
        run: |
          dotnet test KjbTech.Messaging.Sdk.Tests/KjbTech.Messaging.Sdk.Tests.csproj -c $CONFIGURATION --logger "trx;LogFileName=unit-tests.trx"
      - name: Upload unit test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: "**/TestResults/*.trx"
          if-no-files-found: warn

  integration_tests:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
      - name: Cache NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: nuget-${{ runner.os }}-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            nuget-${{ runner.os }}-
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: buildx-${{ runner.os }}-${{ hashFiles('**/Dockerfile', 'docker-compose*.yml') }}
          restore-keys: |
            buildx-${{ runner.os }}-
      - name: Compose build
        env:
          DOCKER_BUILDKIT: 1
        run: docker compose -f docker-compose.yml build
      - name: Start stack
        run: docker compose -f docker-compose.yml up -d
      - name: Run integration tests
        working-directory: src
        run: |
          dotnet test KjbTech.Messaging.Sdk.IntegrationTests/KjbTech.Messaging.Sdk.IntegrationTests.csproj -c $CONFIGURATION --logger "trx;LogFileName=integration-tests.trx"
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: "**/TestResults/*.trx"
          if-no-files-found: warn
      - name: Dump logs on failure
        if: failure()
        run: docker compose logs
      - name: Tear down
        if: always()
        run: docker compose down -v --remove-orphans
